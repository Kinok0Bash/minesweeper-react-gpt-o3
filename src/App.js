import React, { useState } from 'react';
import './App.css';

const ROWS = 10;
const COLS = 10;
const MINES_COUNT = 15;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å–∫–∏ —Å –º–∏–Ω–∞–º–∏ –∏ –ø–æ–¥—Å—á—ë—Ç–æ–º —Å–æ—Å–µ–¥–Ω–∏—Ö –º–∏–Ω
const generateBoard = () => {
  const board = [];
  for (let i = 0; i < ROWS; i++) {
    const row = [];
    for (let j = 0; j < COLS; j++) {
      row.push({
        x: i,
        y: j,
        isMine: false,
        adjacentMines: 0,
        revealed: false,
        flagged: false,
      });
    }
    board.push(row);
  }

  // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
  let minesPlaced = 0;
  while (minesPlaced < MINES_COUNT) {
    const randX = Math.floor(Math.random() * ROWS);
    const randY = Math.floor(Math.random() * COLS);
    if (!board[randX][randY].isMine) {
      board[randX][randY].isMine = true;
      minesPlaced++;
    }
  }

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
  for (let i = 0; i < ROWS; i++) {
    for (let j = 0; j < COLS; j++) {
      if (board[i][j].isMine) continue;
      let mines = 0;
      for (let x = -1; x <= 1; x++) {
        for (let y = -1; y <= 1; y++) {
          const newX = i + x;
          const newY = j + y;
          if (newX >= 0 && newX < ROWS && newY >= 0 && newY < COLS) {
            if (board[newX][newY].isMine) {
              mines++;
            }
          }
        }
      }
      board[i][j].adjacentMines = mines;
    }
  }
  return board;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –æ—Ç–∫—Ä—ã—Ç–∏—è
const Cell = ({ cell, onClick, onContextMenu }) => {
  return (
      <div
          className={`cell ${cell.revealed ? 'revealed' : ''} ${cell.isMine && cell.revealed ? 'mine' : ''}`}
          onClick={onClick}
          onContextMenu={onContextMenu}
      >
        {cell.revealed && !cell.isMine && cell.adjacentMines > 0 ? cell.adjacentMines : ''}
        {cell.flagged && !cell.revealed ? 'üö©' : ''}
      </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Å–∫–∏
const Board = () => {
  const [board, setBoard] = useState(generateBoard());
  const [gameOver, setGameOver] = useState(false);
  const [win, setWin] = useState(false);

  const revealCell = (x, y) => {
    if (gameOver) return;
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–æ—Å–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º—É—Ç–∞—Ü–∏–π
    let newBoard = board.map(row => row.map(cell => ({ ...cell })));
    const cell = newBoard[x][y];

    if (cell.revealed || cell.flagged) return;
    cell.revealed = true;

    // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –º–∏–Ω—É ‚Äì –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
    if (cell.isMine) {
      setGameOver(true);
      newBoard = newBoard.map(row => row.map(c => {
        if (c.isMine) c.revealed = true;
        return c;
      }));
      setBoard(newBoard);
      return;
    }

    // –ï—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç –º–∏–Ω ‚Äì —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π
    if (cell.adjacentMines === 0) {
      const revealNeighbors = (i, j) => {
        for (let dx = -1; dx <= 1; dx++) {
          for (let dy = -1; dy <= 1; dy++) {
            const newX = i + dx;
            const newY = j + dy;
            if (newX >= 0 && newX < ROWS && newY >= 0 && newY < COLS) {
              const neighbor = newBoard[newX][newY];
              if (!neighbor.revealed && !neighbor.flagged) {
                neighbor.revealed = true;
                if (neighbor.adjacentMines === 0 && !neighbor.isMine) {
                  revealNeighbors(newX, newY);
                }
              }
            }
          }
        }
      };
      revealNeighbors(x, y);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–±–µ–¥–∏–ª –ª–∏ –∏–≥—Ä–æ–∫
    let safeCells = 0;
    newBoard.forEach(row => row.forEach(c => {
      if (!c.isMine && c.revealed) safeCells++;
    }));
    if (safeCells === ROWS * COLS - MINES_COUNT) {
      setWin(true);
      newBoard = newBoard.map(row => row.map(c => ({ ...c, revealed: true })));
    }
    setBoard(newBoard);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞
  const handleRightClick = (e, x, y) => {
    e.preventDefault();
    if (gameOver) return;
    const newBoard = board.map(row => row.map(cell => ({ ...cell })));
    const cell = newBoard[x][y];
    if (!cell.revealed) {
      cell.flagged = !cell.flagged;
      setBoard(newBoard);
    }
  };

  const resetGame = () => {
    setBoard(generateBoard());
    setGameOver(false);
    setWin(false);
  };

  return (
      <div className="board-container">
        <h1>–°–∞–ø—ë—Ä</h1>
        {(gameOver || win) && (
            <div className="message">
              {win ? "–ü–æ–±–µ–¥–∞! –í—ã –æ–±–µ–∑–≤—Ä–µ–¥–∏–ª–∏ –≤—Å–µ –º–∏–Ω—ã!" : "–ë–∞—Ö! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!"}
              <button onClick={resetGame}>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
            </div>
        )}
        <div className="board">
          {board.map((row, i) => (
              <div key={i} className="row">
                {row.map((cell, j) => (
                    <Cell
                        key={`${i}-${j}`}
                        cell={cell}
                        onClick={() => revealCell(i, j)}
                        onContextMenu={(e) => handleRightClick(e, i, j)}
                    />
                ))}
              </div>
          ))}
        </div>
      </div>
  );
};

const App = () => {
  return (
      <div className="App">
        <Board />
      </div>
  );
};

export default App;
